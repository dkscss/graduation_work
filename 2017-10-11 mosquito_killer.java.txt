package com.example.shin.mosquito_killer;

import android.app.*;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.*;
import android.media.*;
import android.os.*;
import android.util.*;
import android.view.*;
import android.view.View.OnClickListener;
import android.widget.*;

import java.io.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import java.text.SimpleDateFormat;

import ca.uol.aig.fftpack.*;

//FFT(Fast Fourier Transform) DFT 알고리즘 : 데이터를 시간 기준(time base)에서 주파수 기준(frequency base)으로 바꾸는데 사용.
public class mosquito_killer extends Activity implements OnClickListener {
    // AudioRecord 객체에서 주파수는 8kHz, 오디오 채널은 하나, 샘플은 16비트를 사용
    int frequency = 8000;
    int channelConfiguration = AudioFormat.CHANNEL_CONFIGURATION_MONO;
    int audioEncoding = AudioFormat.ENCODING_PCM_16BIT;
    // 우리의 FFT 객체는 transformer고, 이 FFT 객체를 통해 AudioRecord 객체에서 한 번에 256가지 샘플을
    // 다룬다. 사용하는 샘플의 수는 FFT 객체를 통해
    // 샘플들을 실행하고 가져올 주파수의 수와 일치한다. 다른 크기를 마음대로 지정해도 되지만, 메모리와 성능 측면을 반드시 고려해야
    // 한다.
    // 적용될 수학적 계산이 프로세서의 성능과 밀접한 관계를 보이기 때문이다.
    private RealDoubleFFT transformer;
    int blockSize = 256;
    Button startStopButton;
    boolean started = false;
    boolean run = false;

    int count=0; //모기소리와 다른 소리를 구분할 정수형 변수
    long start_time;
    long current_time;
    double sec;

    private BluetoothAdapter mBluetoothAdapter;
    static final int REQUEST_ENABLE_BT = 10;
    Set<BluetoothDevice> mDevices;
    int mpairedDeviceCount=0;
    BluetoothDevice mRemoteDevie;
    BluetoothSocket mSocket = null;
    OutputStream mOutputStream = null;
    InputStream mInputStream = null;
    private ListView lv;
    EditText mEditSend;

    Button send;
    Button load;
    Button clear;

    // RecordAudio는 여기에서 정의되는 내부 클래스로서 AsyncTask를 확장한다.
    RecordAudio recordTask;

    // Bitmap 이미지를 표시하기 위해 ImageView를 사용한다. 이 이미지는 현재 오디오 스트림에서 주파수들의 레벨을 나타낸다.
    // 이 레벨들을 그리려면 Bitmap에서 구성한 Canvas 객체와 Paint객체가 필요하다.
    ImageView imageView;
    Bitmap bitmap;
    Canvas canvas;
    Paint paint;

    private BackPressCloseHandler backPressCloseHandler;


    @Override
    public void onCreate(Bundle savedInstanceState) {
        //폴더 생성
        String dirPath = Environment.getExternalStorageDirectory().getAbsolutePath()+File.separator+"mosquito_killer";

        File file = new File(dirPath);
        File savefile = new File(dirPath+"mosquito_killer.txt");

        // 일치하는 폴더가 없으면 생성
        if(!file.exists()){ // 일치하는 폴더가 없을 경우
            file.mkdirs();  // 폴더 생성
        }
        try{ //일치하는 텍스트파일이 없으면 생성
            if(!savefile.exists()) {  //텍스트파일 없을 경우
                savefile.createNewFile(); //텍스트 파일 생성
            }
        } catch(IOException e){}

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_mosquito_killer);

        startStopButton = (Button) findViewById(com.example.shin.mosquito_killer.R.id.StartStopButton);
        startStopButton.setOnClickListener(this);

        mEditSend = (EditText)findViewById(R.id.sendString);

        send = (Button)findViewById(R.id.send_Button);
        load = (Button)findViewById(R.id.load_Button);
        clear = (Button)findViewById(R.id.time_Clear);
        lv = (ListView)findViewById(R.id.listview);

        // RealDoubleFFT 클래스 컨스트럭터는 한번에 처리할 샘플들의 수를 받는다. 그리고 출력될 주파수 범위들의 수를
        // 나타낸다.
        transformer = new RealDoubleFFT(blockSize);

        // ImageView 및 관련 객체 설정 부분
        imageView = (ImageView) findViewById(com.example.shin.mosquito_killer.R.id.ImageView01);
        bitmap = Bitmap.createBitmap((int) 256, (int) 100,
                Bitmap.Config.ARGB_8888);
        canvas = new Canvas(bitmap);
        paint = new Paint();
        paint.setColor(Color.GREEN);
        imageView.setImageBitmap(bitmap);

        backPressCloseHandler = new BackPressCloseHandler(this);
    }

    // 이 액티비티의 작업들은 대부분 RecordAudio라는 클래스에서 진행된다. 이 클래스는 AsyncTask를 확장한다.
    // AsyncTask를 사용하면 사용자 인터페이스를 멍하니 있게 하는 메소드들을 별도의 스레드로 실행한다.
    // doInBackground 메소드에 둘 수 있는 것이면 뭐든지 이런 식으로 실행할 수 있다.

    private class RecordAudio extends AsyncTask<Void, double[], Void> {

        @Override
        protected Void doInBackground(Void... params) {
            try {
                // AudioRecord를 설정하고 사용한다.
                int bufferSize = AudioRecord.getMinBufferSize(frequency, channelConfiguration, audioEncoding);

                AudioRecord audioRecord = new AudioRecord( MediaRecorder.AudioSource.MIC, frequency,
                        channelConfiguration, audioEncoding, bufferSize);

                // short로 이뤄진 배열인 buffer는 원시 PCM 샘플을 AudioRecord 객체에서 받는다.
                // double로 이뤄진 배열인 toTransform은 같은 데이터를 담지만 double 타입인데, FFT
                // 클래스에서는 double타입이 필요해서이다.
                short[] buffer = new short[blockSize]; //blockSize = 256
                double[] toTransform = new double[blockSize]; //blockSize = 256

                audioRecord.startRecording();

                while (started) {
                    int bufferReadResult = audioRecord.read(buffer, 0, blockSize); //blockSize = 256
                    Log.i("bufferReadResult", Integer.toString(bufferReadResult));
                    // AudioRecord 객체에서 데이터를 읽은 다음에는 short 타입의 변수들을 double 타입으로
                    // 바꾸는 루프를 처리한다.
                    // 직접 타입 변환(casting)으로 이 작업을 처리할 수 없다. 값들이 전체 범위가 아니라 -1.0에서
                    // 1.0 사이라서 그렇다
                    // short를 32,767(Short.MAX_VALUE) 으로 나누면 double로 타입이 바뀌는데,
                    // 이 값이 short의 최대값이기 때문이다.
                    for (int i = 0; i < blockSize && i < bufferReadResult; i++) {
                        toTransform[i] = (double) buffer[i] / Short.MAX_VALUE; // 부호 있는 16비트
                        Log.i("buffer", Double.toString(buffer[i]));
                        Log.i("Short.MAX_VALUE", Short.toString(Short.MAX_VALUE));
                        Log.i("toTransform", Double.toString(toTransform[i]));
                    }

                    // 이제 double값들의 배열을 FFT 객체로 넘겨준다. FFT 객체는 이 배열을 재사용하여 출력 값을
                    // 담는다. 포함된 데이터는 시간 도메인이 아니라
                    // 주파수 도메인에 존재한다. 이 말은 배열의 첫 번째 요소가 시간상으로 첫 번째 샘플이 아니라는 얘기다.
                    // 배열의 첫 번째 요소는 첫 번째 주파수 집합의 레벨을 나타낸다.

                    // 256가지 값(범위)을 사용하고 있고 샘플 비율이 8,000 이므로 배열의 각 요소가 대략
                    // 15.625Hz를 담당하게 된다. 15.625라는 숫자는 샘플 비율을 반으로 나누고(캡쳐할 수 있는
                    // 최대 주파수는 샘플 비율의 반이다. <- 누가 그랬는데...), 다시 256으로 나누어 나온 것이다.
                    // 따라서 배열의 첫 번째 요소로 나타난 데이터는 영(0)과 15.625Hz 사이에
                    // 해당하는 오디오 레벨을 의미한다.

                    transformer.ft(toTransform);
                    // publishProgress를 호출하면 onProgressUpdate가 호출된다.
                    publishProgress(toTransform);
                }

                audioRecord.stop();
            } catch (Throwable t) {
                Log.e("AudioRecord", "Recording Failed");
            }

            return null;
        }

        // onProgressUpdate는 우리 엑티비티의 메인 스레드로 실행된다. 따라서 아무런 문제를 일으키지 않고 사용자
        // 인터페이스와 상호작용할 수 있다.
        // 이번 구현에서는 onProgressUpdate가 FFT 객체를 통해 실행된 다음 데이터를 넘겨준다. 이 메소드는 최대
        // 100픽셀의 높이로 일련의 세로선으로
        // 화면에 데이터를 그린다. 각 세로선은 배열의 요소 하나씩을 나타내므로 범위는 15.625Hz다. 첫 번째 행은 범위가 0에서
        // 15.625Hz인 주파수를 나타내고,
        // 마지막 행은 3,984.375에서 4,000Hz인 주파수를 나타낸다.

        //400/15.625=25.6   25=390.625   26=406.25
        @Override
        protected void onProgressUpdate(double[]... toTransform) {
            canvas.drawColor(Color.BLACK);

            //	for (int i = 0; i < toTransform[0].length; i++) {
            for (int i = 25; i <= 26; i++) {
                int x = i;
                int downy = (int) (100 - (toTransform[0][i] * 10));
                int upy = 100;

                if(downy<95) { //소리 없을시 수치 : 99~100
                    current_time = System.currentTimeMillis();
                    sec = ((current_time - start_time) / 1000.0); //현재시간-시작시작을 초단위로 변환함
                    if (sec > 10) { //시작하고 소리가 들린지 10초가 경과하면
                        count = 0;  // 카운트 초기화
                        start_time = System.currentTimeMillis(); //카운트 초기화한 시점부터 다시 10초를 셈
                    }
                }
                if(downy<90){ //해당 주파수의 수치가 90미만일 경우(0에 가까울수록 높음)
                    if(count<10){
                        count++;
                    }
                    else if(count>=10){ //카운트가 10이상인 경우
                        count=0; //카운트 초기화

                        // 시스템으로부터 현재시간(ms) 가져오기
                        long now = System.currentTimeMillis();
                        // Data 객체에 시간을 저장한다.
                        Date date = new Date(now);
                        // 각자 사용할 포맷을 정하고 문자열로 만든다.
                        SimpleDateFormat sdfNow = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                        String strNow = sdfNow.format(date);

                        String dirPath = Environment.getExternalStorageDirectory().getAbsolutePath()+File.separator+"mosquito_killer";

                        try{    //텍스트에 모기인식시간 저장

                            RandomAccessFile rf = new RandomAccessFile(dirPath+"/mosquito_killer.txt", "rw"); //이어쓰기
                            rf.seek(rf.length()); //맨마지막 위치로 커서 이동
                            rf.writeBytes(strNow);
                            rf.writeBytes("\n");
                            rf.close();

                        } catch(IOException e){}
                        mEditSend.setText("0"); // "0"을 mEditSend의 문자열에 저장하고
                        sendData(mEditSend.getText().toString()); //아두이노로 mEditSend의 문자열을 전송
                        count=0; //카운트 초기화
                    }
                } //일정 시간마다 정수형 변수 count를 0으로 초기화 해주어야함

                canvas.drawLine(x, downy, x, upy, paint);
            }
            imageView.invalidate();
        }
    }
    //그래프는 소리없으면 99~100수치를 기록하고 소리가 높아질수록 수치가 낮아짐
    //사람 목소리의 주파수는 125~1000헤르츠
    //따라서 일정시간동안 390.626~406.26 헤르츠 영역에서 일정수치 미만(80?)의 반응이 여러번(10회?) 나타난다면 모기가 있다고 판단. 블루투스를 통하여 아두이노에 '0'을 전달

    BluetoothDevice getDeviceFromBondedList(String name) {
        // BluetoothDevice : 페어링 된 기기 목록을 얻어옴.
        BluetoothDevice selectedDevice = null;
        // getBondedDevices 함수가 반환하는 페어링 된 기기 목록은 Set 형식이며,
        // Set 형식에서는 n 번째 원소를 얻어오는 방법이 없으므로 주어진 이름과 비교해서 찾는다.
        for(BluetoothDevice deivce : mDevices) {
            // getName() : 단말기의 Bluetooth Adapter 이름을 반환
            if(name.equals(deivce.getName())) {
                selectedDevice = deivce;
                break;
            }
        }
        return selectedDevice;
    }

    void sendData(String msg) {
        try{
            // getBytes() : String을 byte로 변환
            // OutputStream.write : 데이터를 쓸때는 write(byte[]) 메소드를 사용함. byte[] 안에 있는 데이터를 한번에 기록해 준다.
            mOutputStream.write(msg.getBytes());  // 문자열 전송.

        }catch(Exception e) {  // 문자열 전송 도중 오류가 발생한 경우
            Toast.makeText(getApplicationContext(), "데이터 전송중 오류가 발생", Toast.LENGTH_LONG).show();
            finish();  // App 종료
        }
    }
    void connectToSelectedDevices(String selectedDeviceName) {
        // BluetoothDevice 원격 블루투스 기기를 나타냄.
        mRemoteDevie = getDeviceFromBondedList(selectedDeviceName);
        // java.util.UUID.fromString : 자바에서 중복되지 않는 Unique 키 생성.
        UUID uuid = java.util.UUID.fromString("00001101-0000-1000-8000-00805f9b34fb");

        try {
            // 소켓 생성, RFCOMM 채널을 통한 연결.
            // createRfcommSocketToServiceRecord(uuid) : 이 함수를 사용하여 원격 블루투스 장치와 통신할 수 있는 소켓을 생성함.
            // 이 메소드가 성공하면 스마트폰과 페어링 된 디바이스간 통신 채널에 대응하는 BluetoothSocket 오브젝트를 리턴함.
            mSocket = mRemoteDevie.createRfcommSocketToServiceRecord(uuid);
            mSocket.connect(); // 소켓이 생성 되면 connect() 함수를 호출함으로써 두기기의 연결은 완료된다.

            // 데이터 송수신을 위한 스트림 얻기.
            // BluetoothSocket 오브젝트는 두개의 Stream을 제공한다.
            // 1. 데이터를 보내기 위한 OutputStrem
            // 2. 데이터를 받기 위한 InputStream
            mOutputStream = mSocket.getOutputStream();
            mInputStream = mSocket.getInputStream();

        }catch(Exception e) { // 블루투스 연결 중 오류 발생
            Toast.makeText(getApplicationContext(), "블루투스 연결 중 오류가 발생했습니다.", Toast.LENGTH_LONG).show();
            finish();  // App 종료
        }
    }

    public void onClick(View arg0) {
        if (started) {
            started = false;
            startStopButton.setText("시작");
            recordTask.cancel(true);
        } else {
            start_time = System.currentTimeMillis();
            started = true;
            startStopButton.setText("정지");
            recordTask = new RecordAudio();
            recordTask.execute();
        }
    }

    public void on(View view){  //블루투스 활성화
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        if(mBluetoothAdapter==null){    //장치가 블루투스를 지원하지 않는 경우
            finish();   //어플리케이션 종료
        }
        if(!mBluetoothAdapter.isEnabled()) {
            android.content.Intent turnOn = new android.content.Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(turnOn, REQUEST_ENABLE_BT);
            Toast.makeText(getApplicationContext(), "블루투스가 켜집니다.", Toast.LENGTH_LONG).show();
        }
        else{
            Toast.makeText(getApplicationContext(), "이미 켜져 있습니다.", Toast.LENGTH_LONG).show();
        }
    }

    public void off(View view){ //블루투스 비활성화
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        if(mBluetoothAdapter.isEnabled()) {
            mBluetoothAdapter.disable();
            Toast.makeText(getApplicationContext(), "블루투스가 꺼집니다.", Toast.LENGTH_LONG).show();
        }
        else{
            Toast.makeText(getApplicationContext(), "이미 꺼져 있습니다.", Toast.LENGTH_LONG).show();
        }
    }

    public void selectDevice(){
        mDevices = mBluetoothAdapter.getBondedDevices();
        mpairedDeviceCount = mDevices.size();

        if(mpairedDeviceCount==0){  //페어링된 장치가 없는 경우
            Toast.makeText(getApplicationContext(), "페어링된 장치가 없습니다.", Toast.LENGTH_LONG).show();
            finish();   //어플리케이션 종료
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("블루투스 장치 선택");

        List<String> listItems = new ArrayList<String>();

        for(BluetoothDevice device : mDevices) {
            listItems.add(device.getName());
        }
        listItems.add("취소");

        final CharSequence[] items = listItems.toArray(new CharSequence[listItems.size()]);

        listItems.toArray(new CharSequence[listItems.size()]);

        builder.setItems(items, new DialogInterface.OnClickListener(){

            @Override
            public void onClick(DialogInterface dialog, int item){
                if(item==mpairedDeviceCount){
                    Toast.makeText(getApplicationContext(), "연결할 장치를 선택하지 않았습니다.", Toast.LENGTH_LONG).show();
                    finish();
                }
                else{
                    connectToSelectedDevices(items[item].toString());
                }
            }
        });

        builder.setCancelable(false);
        AlertDialog alert=builder.create();
        alert.show();
    }

    public void send(View view) {  //서보모터를 무한반복하여 작동
        //최초로 작동버튼 클릭시 run = false
        if (run) {    // 정지시키려고 할 때
            run = false;
            send.setText("작동");
            mEditSend.setText("2");
            sendData(mEditSend.getText().toString()); //아두이노 서보모터 무한반복 정지메시지 전달함수 호출
        } else {        // 작동시키려고 할 때
            run = true;
            send.setText("정지");
            mEditSend.setText("1");
            sendData(mEditSend.getText().toString()); //아두이노 서보모터 무한 반복 작동메시지 전달함수 호출
        }
    }

    public void load(View view){  //모기인식시간 불러오기
        ArrayList list =  new ArrayList();

        // 파일 내용 읽어오기
        String dirPath = Environment.getExternalStorageDirectory().getAbsolutePath()+File.separator+"mosquito_killer"+File.separator;
        String loadPath = dirPath+"mosquito_killer.txt";

        try {
            FileInputStream fis = new FileInputStream(loadPath);
            BufferedReader bufferReader = new BufferedReader(new InputStreamReader(fis));

            String temp="";

            while( (temp = bufferReader.readLine()) != null ) {
                list.add(temp);
            }

            final ArrayAdapter adapter = new ArrayAdapter(this,android.R.layout.simple_list_item_1, list);
            lv.setAdapter(adapter);

        } catch (Exception e) {}
    }

    public void clear(View view) {
        String dirPath = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + "mosquito_killer"+File.separator;

        File file = new File(dirPath + "mosquito_killer.txt");

        try { //텍스트 파일 내용 초기화
            if (file!=null&&file.exists()) {  //텍스트파일 없을 경우
                file.delete();
            }
            file.createNewFile(); //텍스트 파일 생성
            Toast.makeText(getApplicationContext(), "모기 인식시간이 초기화되었습니다.", Toast.LENGTH_LONG).show();
        } catch (IOException e) {
        }
    }

    public class BackPressCloseHandler{
        private long backKeyPressedTime = 0; //시간을 저장하는 변수
        private Toast toast;

        private Activity activity;

        public BackPressCloseHandler(Activity context){
            this.activity = context;
        }

        public void onBackPressed(){
            if(System.currentTimeMillis() > backKeyPressedTime + 2000){ //뒤로가기 버튼 처음 클릭한 시간+2초가 현재시간보다 크다면(시간이 오래지나면)
                backKeyPressedTime = System.currentTimeMillis();
                showGuide(); //알림창 띄우기
                return;
            }
            if(System.currentTimeMillis() <= backKeyPressedTime +2000){  //뒤로가기 버튼 처음 클릭한 시간+2초가 현재시간보다 작다면
                activity.finish(); //앱 종료
                toast.cancel();
            }
        }

        public void showGuide(){
            toast = Toast.makeText(activity, "뒤로 버튼을 한번 더 누르시면 종료됩니다.", Toast.LENGTH_SHORT);
            toast.show();
        }
    }

    @Override
    protected void onDestroy(){
        try{
            mInputStream.close();
            mSocket.close();
        } catch(Exception e){}
        super.onDestroy();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data){
        switch(requestCode){
            case REQUEST_ENABLE_BT:
                if(resultCode==RESULT_OK){
                    selectDevice();
                }
                else if(resultCode==RESULT_CANCELED){
                    Toast.makeText(getApplicationContext(), "블루투스를 사용할 수 없어 프로그램을 종료합니다.", Toast.LENGTH_LONG).show();
                    finish();
                }
                break;
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    @Override
    public void onBackPressed(){
        backPressCloseHandler.onBackPressed();
    }
}